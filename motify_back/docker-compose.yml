# version: '3.8'
services:
  db_asistencia: 
    image: postgres:15-alpine
    container_name: db_motify
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin_motorizados_dev}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-supersecretdevpassword} # TEST
      POSTGRES_DB: ${POSTGRES_DB:-asistencia_motorizados_dev_db}
    ports:
      - "${DB_PORT_HOST:-5433}:5432" 
    volumes:
      - postgres_data_motify:/var/lib/postgresql/data
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin_motorizados_dev} -d ${POSTGRES_DB:-asistencia_motorizados_dev_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api_asistencia: 
    build:
      context: . 
      dockerfile: Dockerfile # Especifica el nombre del Dockerfile a usar
    container_name: fastapi_asistencia_api_container
    restart: always
    ports:
      - "${API_PORT_HOST:-8000}:8000" # Mapea el puerto del host al del contenedor de la API
    depends_on:
      db_asistencia: # Se asegura que el servicio de BD se inicie y est√© saludable antes que la API
        condition: service_healthy # Espera a que el healthcheck de la BD pase
    environment:
      # DATABASE_URL: "postgresql://${POSTGRES_USER:-admin_motorizados_dev}:${POSTGRES_PASSWORD:-supersecretdevpassword}@db_asistencia:5432/${POSTGRES_DB:-asistencia_motorizados_dev_db}"
      DATABASE_URL: "postgresql+asyncpg://${POSTGRES_USER:-admin_motorizados_dev}:${POSTGRES_PASSWORD:-supersecretdevpassword}@db_asistencia:5432/${POSTGRES_DB:-asistencia_motorizados_dev_db}"
      # Otros secretos y configuraciones para tu API
      SECRET_KEY: ${SECRET_KEY:-your_super_secret_key_for_jwt_CHANGE_IT} # Para JWT
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
    volumes:
      - .:/app 
volumes:
  postgres_data_motify: 